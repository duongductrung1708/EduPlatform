#!/usr/bin/env node

/**
 * Script test k·∫øt n·ªëi MongoDB Atlas
 * Usage: node scripts/test-atlas.js
 */

const mongoose = require('mongoose');
require('dotenv').config();

async function testAtlasConnection() {
  console.log('‚òÅÔ∏è  Test k·∫øt n·ªëi MongoDB Atlas...\n');
  
  const mongoUri = process.env.MONGO_URI;
  
  if (!mongoUri) {
    console.error('‚ùå Kh√¥ng t√¨m th·∫•y MONGO_URI trong file .env');
    console.log('üìù H√£y t·∫°o file .env v·ªõi n·ªôi dung:');
    console.log('   MONGO_URI=mongodb+srv://username:password@cluster.mongodb.net/eduplatform');
    process.exit(1);
  }
  
  // ·∫®n password trong log
  const safeUri = mongoUri.replace(/:\/\/[\w-]+:(.*?)@/, '://***:***@');
  console.log('üì° Connection URI:', safeUri);
  
  // Ki·ªÉm tra format
  if (!mongoUri.includes('mongodb+srv://')) {
    console.log('‚ö†Ô∏è  C·∫£nh b√°o: URI kh√¥ng ph·∫£i MongoDB Atlas format');
    console.log('   Atlas URI th∆∞·ªùng b·∫Øt ƒë·∫ßu v·ªõi: mongodb+srv://');
  }
  
  try {
    console.log('‚è≥ ƒêang k·∫øt n·ªëi ƒë·∫øn MongoDB Atlas...');
    
    // K·∫øt n·ªëi v·ªõi timeout ng·∫Øn h∆°n cho Atlas
    await mongoose.connect(mongoUri, {
      serverSelectionTimeoutMS: 10000, // 10 seconds
      connectTimeoutMS: 10000,
      socketTimeoutMS: 10000,
    });
    
    console.log('‚úÖ K·∫øt n·ªëi MongoDB Atlas th√†nh c√¥ng!');
    
    // Ki·ªÉm tra th√¥ng tin cluster
    const db = mongoose.connection.db;
    const admin = db.admin();
    
    try {
      const serverStatus = await admin.serverStatus();
      console.log(`üè∑Ô∏è  MongoDB Version: ${serverStatus.version}`);
      console.log(`üåç Host: ${serverStatus.host}`);
    } catch (err) {
      console.log('‚ÑπÔ∏è  Kh√¥ng th·ªÉ l·∫•y th√¥ng tin server (c√≥ th·ªÉ do permissions)');
    }
    
    // Ki·ªÉm tra database
    console.log(`üìä Database: ${db.databaseName}`);
    
    // Li·ªát k√™ collections
    const collections = await db.listCollections().toArray();
    console.log(`üìÅ Collections: ${collections.length}`);
    
    if (collections.length > 0) {
      console.log('   - ' + collections.map(c => c.name).join('\n   - '));
      
      // ƒê·∫øm documents trong collections quan tr·ªçng
      const importantCollections = ['users', 'classrooms', 'courses', 'assignments'];
      for (const collectionName of importantCollections) {
        try {
          const count = await db.collection(collectionName).countDocuments();
          console.log(`   üìÑ ${collectionName}: ${count} documents`);
        } catch (err) {
          // Collection kh√¥ng t·ªìn t·∫°i
        }
      }
    } else {
      console.log('‚ÑπÔ∏è  Database tr·ªëng - s·∫Ω ƒë∆∞·ª£c t·∫°o khi ·ª©ng d·ª•ng ch·∫°y');
    }
    
    // Test write operation
    try {
      const testCollection = db.collection('connection_test');
      await testCollection.insertOne({ 
        test: true, 
        timestamp: new Date(),
        message: 'MongoDB Atlas connection test successful'
      });
      
      const testDoc = await testCollection.findOne({ test: true });
      if (testDoc) {
        console.log('‚úÖ Test write/read operation th√†nh c√¥ng');
        await testCollection.deleteOne({ _id: testDoc._id });
        console.log('üßπ ƒê√£ d·ªçn d·∫πp test document');
      }
    } catch (err) {
      console.log('‚ö†Ô∏è  Test write operation th·∫•t b·∫°i:', err.message);
    }
    
  } catch (error) {
    console.error('‚ùå L·ªói k·∫øt n·ªëi MongoDB Atlas:');
    console.error('   ', error.message);
    
    // Ph√¢n t√≠ch l·ªói c·ª• th·ªÉ
    if (error.message.includes('authentication failed')) {
      console.log('\nüîß Gi·∫£i ph√°p Authentication:');
      console.log('   1. Ki·ªÉm tra username/password trong connection string');
      console.log('   2. ƒê·∫£m b·∫£o user c√≥ quy·ªÅn "Read and write to any database"');
      console.log('   3. Ki·ªÉm tra Database Access trong MongoDB Atlas dashboard');
    } else if (error.message.includes('timeout')) {
      console.log('\nüîß Gi·∫£i ph√°p Timeout:');
      console.log('   1. Ki·ªÉm tra k·∫øt n·ªëi internet');
      console.log('   2. Ki·ªÉm tra Network Access trong MongoDB Atlas');
      console.log('   3. Th√™m IP address hi·ªán t·∫°i v√†o whitelist');
      console.log('   4. Th·ª≠ tƒÉng timeout trong connection options');
    } else if (error.message.includes('ENOTFOUND') || error.message.includes('getaddrinfo')) {
      console.log('\nüîß Gi·∫£i ph√°p DNS:');
      console.log('   1. Ki·ªÉm tra connection string c√≥ ƒë√∫ng kh√¥ng');
      console.log('   2. Ki·ªÉm tra cluster name trong MongoDB Atlas');
      console.log('   3. Th·ª≠ ping cluster URL');
    } else if (error.message.includes('ECONNREFUSED')) {
      console.log('\nüîß Gi·∫£i ph√°p Connection:');
      console.log('   1. Ki·ªÉm tra Network Access settings');
      console.log('   2. ƒê·∫£m b·∫£o IP address ƒë∆∞·ª£c whitelist');
      console.log('   3. Ki·ªÉm tra firewall settings');
    }
    
    console.log('\nüìñ Xem h∆∞·ªõng d·∫´n chi ti·∫øt: MONGODB_ATLAS_SETUP.md');
    process.exit(1);
  } finally {
    // ƒê√≥ng k·∫øt n·ªëi
    await mongoose.disconnect();
    console.log('\nüëã ƒê√£ ƒë√≥ng k·∫øt n·ªëi MongoDB Atlas');
  }
}

// Ch·∫°y script
testAtlasConnection().catch(console.error);
